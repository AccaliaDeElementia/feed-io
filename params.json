{
  "name": "Feed-io",
  "tagline": "A PHP library to read and write feeds in the RSS or Atom format",
  "body": "# feed-io\r\n\r\n[feed-io](https://github.com/alexdebril/feed-io) is a PHP library built to consume and serve RSS / Atom feeds. It features:\r\n\r\n- Atom / RSS read and write support\r\n- a Command line interface to read feeds\r\n- HTTP Headers support when reading feeds in order to save network traffic\r\n- Detection of the format (RSS / Atom) when reading feeds\r\n- Enclosure support to handle external medias like audio content\r\n- PSR compliant logging\r\n- Content filtering to fetch only the newest items\r\n- Malformed feeds auto correction\r\n- DateTime detection and conversion\r\n- A generic HTTP ClientInterface\r\n- Guzzle Client integration\r\n\r\nKeep informed about new releases and incoming features : http://debril.org/category/feed-io\r\n\r\n# Installation\r\n\r\nUse Composer to add feed-io into your project's requirements :\r\n\r\n```sh\r\n    composer require debril/feed-io\r\n ```\r\n\r\n# Requirements\r\n\r\nfeed-io requires :\r\n\r\n- php 5.6+\r\n- psr/log 1.0\r\n- guzzlehttp/guzzle 6.2+\r\n\r\nit suggests :\r\n- monolog/monolog 1.10+\r\n\r\nMonolog is not the only library suitable to handle feed-io's logs, you can use any PSR/Log compliant library instead.\r\n\r\n# Fetching the repository\r\n\r\nDo this if you want to contribute (and you're welcome to do so):\r\n\r\n```sh\r\n    git clone https://github.com/alexdebril/feed-io.git\r\n\r\n    cd feed-io/\r\n\r\n    composer install\r\n```\r\n\r\n# Unit Testing\r\n\r\nYou can run the unit test suites using the following command in the library's source directory:\r\n\r\n```sh\r\n\r\n    make test\r\n\r\n```\r\n\r\nUsage\r\n=====\r\n\r\n## CLI\r\n\r\nLet's suppose you installed feed-io using Composer, you can use its command line client to read feeds from your terminal :\r\n\r\n```shell\r\n./vendor/bin/feedio read http://php.net/feed.atom\r\n```\r\n\r\nYou can specify the number of items you want to read using the --count option. The instruction below will display the latest item :\r\n\r\n```shell\r\n./vendor/bin/feedio read -c 1 http://php.net/feed.atom\r\n```\r\n\r\n## reading\r\n\r\nfeed-io is designed to read feeds across the internet and to publish your own. Its main class is [FeedIo](https://github.com/alexdebril/feed-io/blob/master/src/FeedIo/FeedIo.php) :\r\n\r\n```php\r\n\r\n// create a simple FeedIo instance\r\n$feedIo = \\FeedIo\\Factory::create()->getFeedIo();\r\n\r\n// read a feed\r\n$result = $feedIo->read($url);\r\n\r\n// or read a feed since a certain date\r\n$result = $feedIo->readSince($url, new \\DateTime('-7 days'));\r\n\r\n// get title\r\n$feedTitle = $result->getFeed()->getTitle();\r\n\r\n// iterate through items\r\nforeach( $result->getFeed() as $item ) {\r\n    $item->getTitle();\r\n}\r\n\r\n```\r\n\r\n## formatting an object into a XML stream\r\n\r\n```php\r\n\r\n// build the feed\r\n$feed = new FeedIo\\Feed;\r\n$feed->setTitle('...');\r\n\r\n// convert it into Atom\r\n$dom = $feedIo->toAtom($feed);\r\n\r\n// or ...\r\n$dom = $feedIo->format($feed, 'atom');\r\n\r\n```\r\n\r\n## building a feed including medias\r\n\r\n```php\r\n// build the feed\r\n$feed = new FeedIo\\Feed;\r\n$feed->setTitle('...');\r\n\r\n$item = $feed->newItem();\r\n\r\n// build the media\r\n$media = new \\FeedIo\\Feed\\Item\\Media\r\n$media->setUrl('http://yourdomain.tld/medias/some-podcast.mp3');\r\n$media->setType('audio/mpeg');\r\n\r\n// add it to the item\r\n$item->addMedia($media);\r\n\r\n$feed->add($item);\r\n\r\n```\r\n## activate logging\r\n\r\nfeed-io natively supports PSR-3 logging, you can activate it by choosing a 'builder' in the factory :\r\n\r\n```php\r\n\r\n$feedIo = \\FeedIo\\Factory::create(['builder' => 'monolog'])->getFeedIo();\r\n\r\n```\r\n\r\nfeed-io only provides a builder to create Monolog\\Logger instances. You can write your own, as long as the Builder implements BuilderInterface.\r\n\r\n## Building a FeedIo instance without the factory\r\n\r\nTo create a new FeedIo instance you only need to inject two dependencies :\r\n\r\n - an HTTP Client implementing FeedIo\\Adapter\\ClientInterface. It can be wrapper for an external library like FeedIo\\Adapter\\Guzzle\\Client\r\n- a PSR-3 logger implementing Psr\\Log\\LoggerInterface\r\n\r\n```php\r\n\r\n// first dependency : the HTTP client\r\n// here we use Guzzle as a dependency for the client\r\n$guzzle = new GuzzleHttp\\Client();\r\n// Guzzle is wrapped in this adapter which is a FeedIo\\Adapter\\ClientInterface  implementation\r\n$client = new FeedIo\\Adapter\\Guzzle\\Client($guzzle);\r\n\r\n// second dependency : a PSR-3 logger\r\n$logger = new Psr\\Log\\NullLogger();\r\n\r\n// now create FeedIo's instance\r\n$feedIo = new FeedIo\\FeedIo($client, $logger);\r\n\r\n```\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}